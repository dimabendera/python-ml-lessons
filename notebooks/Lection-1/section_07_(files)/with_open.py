with open('states.txt', 'r') as states_file:
    states = states_file.read()

print(states)

# *with* це спеціальне ключове слово Python, яке використовується для створення "контейнера",
# який автоматично закриває ваш файл, коли рівень відступу порушено.

# Таким чином, у рядку 1 відкривається файл 'states.txt' і створюється змінна states_file.
# states_file - це *файловий об'єкт*, що не повинно бути занадто страшно.
# Ми працювали з рядковими об'єктами та об'єктами списку, навіть не усвідомлюючи цього!
# Рядкові об'єкти та об'єкти списку - це різні способи зберігання інформації в Python,
# і кожен з них має свій власний набір функцій, які працюють лише з цим типом речей.

# Таким чином, рядкові об'єкти мають рядкові методи, такі як .find() та .replace()
# -- функції, які працюють лише з рядками.

# Об'єкти списку мають такі методи списку, як .append() та .pop() — функції, які працюють лише зі списками.
# Ми використовуємо open('states.txt') як states_file для створення *файлового об'єкта*,
# а файлові об'єкти мають файлові методи — функції, які працюють лише з файлами.

# open() - це спеціальна вбудована функція Python, яка наказує Python відкрити файл.
#   open() може приймати до двох аргументів/параметрів.
#   Перший параметр - це файл, який потрібно відкрити.
#       Якщо файл, який ви хочете відкрити, і скрипт, який ви запускаєте, знаходяться в одній папці,
#       ви можете просто вимовити ім'я файлу, як ми зробили в рядку 1.
#       В іншому випадку, вам потрібно буде надати Python більш детальну інформацію про те,
#       де він може знайти файл - або використовуючи повний шлях до файлу,
#       Або просто шлях, звідки він зараз дивиться. (section_07_(файли))

#   Другий параметр підказує Python, як відкрити файл.  Цей параметр є рядком.
#       Існує три поширені способи відкриття файлу, і ми спочатку обговоримо їх.
#           r: read-only mode.  Python не вноситиме жодних змін до цього файлу, але ви можете читати з нього.
#           w: write mode. Якщо файл не існує, Python створить новий файл з цим ім'ям.
#           В іншому випадку Python перезапише існуючий файл.
#           a: append mode. Якщо файл не існує, Python створить новий файл з цим ім'ям.
#           В іншому випадку Python буде додано в кінець існуючого файлу.
#       І все ж важливі, але менш поширені:
#           b: binary mode.  Використовуйте це під час читання з нетекстового файлу, наприклад зображення.

# .read() це файловий метод, який читає файл (який файл? той,
# що знаходиться у файловому об'єкті безпосередньо перед крапкою) і повертає весь вміст у вигляді рядка.
# У рядку 2 зберігаємо весь вміст файлу у вигляді рядка, станів
